{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","console","log","parse","View","style","styles","container","Text","StatusBar","header","TouchableOpacity","onPress","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.fd23dae3.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  ActivityIndicator,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) => {\n    // 현재 있는 toDos를 string으로 바꾸고\n    // AsyncStorage에 저장\n    // await 사용 ? 휴대폰 디스크에 접근하므로 에러발생 가능 있음\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  // const loadToDos = async () => {\n  //   try {\n  //     const s = await AsyncStorage.getItem(STORAGE_KEY);\n  //     setToDos(JSON.parse(s));\n  //   } catch (e) {\n  //     alert(e);\n  //   }\n  // };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    console.log(s);\n    s !== null ? setToDos(JSON.parse(s)) : null;\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    // save to do\n    // work에는 work가 맞는지 아닌지\n\n    // const newToDos = Object.assign({}, toDos, {\n    //   [Date.now()]: { text, work: working },\n    // });\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          /*\n          work를 클릭하면 working이 true가 되고\n          travel을 클릭하면 working이 false가 됨.\n           이때 toDos에 저장될 때도 work에 쓴 애는 working이 true로\n          travel에 쓴 애는 working이 false로 저장됨.\n           따라서 둘이 같은지 확인하면 됨\n          */\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Text>\n                  <Fontisto\n                    name=\"trash\"\n                    size={18}\n                    color={theme.grey}\n                  ></Fontisto>\n                </Text>\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}